// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TeamPulse.Teams.Infrastructure.DbContexts;

#nullable disable

namespace TeamPulse.Teams.Infrastructure.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    [Migration("20250605030459_PerformancesInit")]
    partial class PerformancesInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("departments")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TeamPulse.Teams.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("HeadOfDepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("head_of_department_id");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "TeamPulse.Teams.Domain.Entities.Department.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("HeadOfDepartmentId")
                        .HasDatabaseName("ix_departments_head_of_department_id");

                    b.ToTable("departments", "departments");
                });

            modelBuilder.Entity("TeamPulse.Teams.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDepartmentManager")
                        .HasColumnType("boolean")
                        .HasColumnName("is_department_manager");

                    b.Property<bool>("IsTeamManager")
                        .HasColumnType("boolean")
                        .HasColumnName("is_team_manager");

                    b.Property<Guid?>("WorkingDepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid?>("WorkingTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.HasIndex("WorkingDepartmentId")
                        .HasDatabaseName("ix_employees_working_department_id");

                    b.HasIndex("WorkingTeamId")
                        .HasDatabaseName("ix_employees_team_id");

                    b.ToTable("employees", "departments");
                });

            modelBuilder.Entity("TeamPulse.Teams.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid>("HeadOfTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("head_of_team_id");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "TeamPulse.Teams.Domain.Entities.Team.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_teams_department_id");

                    b.HasIndex("HeadOfTeamId")
                        .HasDatabaseName("ix_teams_head_of_team_id");

                    b.ToTable("teams", "departments");
                });

            modelBuilder.Entity("TeamPulse.Teams.Domain.Entities.Department", b =>
                {
                    b.HasOne("TeamPulse.Teams.Domain.Entities.Employee", "HeadOfDepartment")
                        .WithMany()
                        .HasForeignKey("HeadOfDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departments_employees_head_of_department_id");

                    b.Navigation("HeadOfDepartment");
                });

            modelBuilder.Entity("TeamPulse.Teams.Domain.Entities.Employee", b =>
                {
                    b.HasOne("TeamPulse.Teams.Domain.Entities.Department", null)
                        .WithMany("Employees")
                        .HasForeignKey("WorkingDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_employees_departments_working_department_id");

                    b.HasOne("TeamPulse.Teams.Domain.Entities.Team", null)
                        .WithMany("Employees")
                        .HasForeignKey("WorkingTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_employees_teams_team_id");
                });

            modelBuilder.Entity("TeamPulse.Teams.Domain.Entities.Team", b =>
                {
                    b.HasOne("TeamPulse.Teams.Domain.Entities.Department", null)
                        .WithMany("Teams")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_teams_departments_department_id");

                    b.HasOne("TeamPulse.Teams.Domain.Entities.Employee", "HeadOfTeam")
                        .WithMany()
                        .HasForeignKey("HeadOfTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teams_employees_head_of_team_id");

                    b.Navigation("HeadOfTeam");
                });

            modelBuilder.Entity("TeamPulse.Teams.Domain.Entities.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("TeamPulse.Teams.Domain.Entities.Team", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
