// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TeamPulse.Teams.Infrastructure.DbContexts;

#nullable disable

namespace TeamPulse.Teams.Infrastructure.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    partial class WriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("departments")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TeamPulse.Teams.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "TeamPulse.Teams.Domain.Entities.Department.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.ToTable("departments", "departments");
                });

            modelBuilder.Entity("TeamPulse.Teams.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("managed_department_id")
                        .HasColumnType("uuid")
                        .HasColumnName("managed_department_id");

                    b.Property<Guid?>("managed_team_id")
                        .HasColumnType("uuid")
                        .HasColumnName("managed_team_id");

                    b.Property<Guid?>("team_id")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.HasIndex("managed_department_id")
                        .IsUnique()
                        .HasDatabaseName("ix_employees_managed_department_id");

                    b.HasIndex("managed_team_id")
                        .IsUnique()
                        .HasDatabaseName("ix_employees_managed_team_id");

                    b.HasIndex("team_id")
                        .HasDatabaseName("ix_employees_team_id");

                    b.ToTable("employees", "departments");
                });

            modelBuilder.Entity("TeamPulse.Teams.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("department_id")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "TeamPulse.Teams.Domain.Entities.Team.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("department_id")
                        .HasDatabaseName("ix_teams_department_id");

                    b.ToTable("teams", "departments");
                });

            modelBuilder.Entity("TeamPulse.Teams.Domain.Entities.Employee", b =>
                {
                    b.HasOne("TeamPulse.Teams.Domain.Entities.Department", "Department")
                        .WithOne("HeadOfDepartment")
                        .HasForeignKey("TeamPulse.Teams.Domain.Entities.Employee", "managed_department_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_employees_departments_managed_department_id");

                    b.HasOne("TeamPulse.Teams.Domain.Entities.Team", "ManagedTeam")
                        .WithOne("HeadOfTeam")
                        .HasForeignKey("TeamPulse.Teams.Domain.Entities.Employee", "managed_team_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_employees_teams_managed_team_id");

                    b.HasOne("TeamPulse.Teams.Domain.Entities.Team", "Team")
                        .WithMany("Employees")
                        .HasForeignKey("team_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_employees_teams_team_id");

                    b.Navigation("Department");

                    b.Navigation("ManagedTeam");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TeamPulse.Teams.Domain.Entities.Team", b =>
                {
                    b.HasOne("TeamPulse.Teams.Domain.Entities.Department", "Department")
                        .WithMany("Teams")
                        .HasForeignKey("department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_teams_departments_department_id");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("TeamPulse.Teams.Domain.Entities.Department", b =>
                {
                    b.Navigation("HeadOfDepartment");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("TeamPulse.Teams.Domain.Entities.Team", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("HeadOfTeam");
                });
#pragma warning restore 612, 618
        }
    }
}
